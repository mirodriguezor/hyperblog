!!----------------------------------------------------INFORMACION GENERAL DE GIT ----------------------------------------------------!!
Cuando se ejectura el coman "git init" en un directorio suceden varias cosas
	1. Se crea el espacio STAGING, es un area que funciona en memoria RAM y es donde se van almacenando los cambios. Cuando se
		ejectuta el comando "git add ." los cambios quedan en el Staging.
	2. Se crea el REPOSITORIO, es la carpeta .git




!!---------------------------------------------------- COMANDOS LINUX ----------------------------------------------------!!


history --- Para ver el registro de comandos realizados en la consola

!(code) --- Para ejecutar el comando registrado en history con base en el indice, ejemplo:
	4 - mkdir comandos_linux.txt
	Al ejecutar !4 ejecutara el comando para crear la carpeta comandos_linux.txt.





!!---------------------------------------------------- COMANDOS GIT ----------------------------------------------------!!
NOTA IMPORTANTE:
( Se utiliza guion "-" para letras y doble guion "--" para palabras)

'git config --list' --- Trae el listado de la configuracion por defecto de mi Git.
'git config --list --show-origin' --- Muestra el archivo de configuracion
'git config --global user.name my_name' --- Configurar el nombre de usuario de Git
'git config --global user.email my_email' --- Configurar el email de Git
'git config -l' --- Enlista los parametros de configuracion

'git log --all --graph --decorate --oneline' --- Muestra toda la historia del proyecto desde que arrancó


--'git add .' --- Agrega todos los cambios efectuados en el directorio actual, los deja en un limbo listos
			para dar git commit -m "Comentario"


--'git commit -m "Commit detail"'  --- Subir esos cambios que estaban en el limbo despues del comando "git add ." para que 
								queden guardados en el repositorio.


--'git commit -am "Commit detail"' --- Subir los cambios al repositorio local sin necesidad de dar git add . por aparte


--'git commit --amend' --- Agrego cambios al ultimo commit realizado para no hacer diferentes commits. 
						   debe realizarse git add . con anterioridad.

--'git rm --cached name_file' --- Se ejecuta este comando para revetir el "git add ." ejectutado
										 con anterioridad inidcando un archivo especifico. Luego de ejecutar		
										 este comando si se hace commit no se va a tener en cuenta porque se saco del "git add ."


--'git diff code_commit1 code_commit2' --- Compara dos versiones de commit realizados en Git, para revisar cuales son los codigos
									   de los commit se ejecuta el comando "git log".


--'git log --stat' --- Se verifica los commit y los cambios que se han realizado


--'git log --oneline' ---Detalle de los commit en linea para mas claridad.


--'git reset code_commit' --- reseteamos todo al commit seleccionado, si el commit es previo al ultimo	
							  se borraran los commits siguientes a ese sin borrar la informacion.


--'git reset --hard code_commit' --- reseteamos todo al commit especificado borrando todos los cambios efectuados en 
							  el directorio actual. Borra incluso lo que haya en staging.


--'git reset --hard' --- reseteamos todo al ultimo commit borrando todos los cambios efectuados en 
							  el directorio actual. Borra incluso lo que haya en staging.


--'git checkout -- .'  --- Revierte todos los cambios al ultimo commit sin borrar lo que este en staging


--'git checkout - .'  --- Revierte todos los cambios al ultimo commit borrando lo que hay en staging incluido


--'git checkout code_commit name_file' --- Revierte los cambios al ultimo commit pero del archivo especificado
										 sin afectar los cambios realizados a los demas archivos.
										 "NOTA: Esto se hace en caso de querer revertir la version anterior de
										  		de un archivo particular sin dañar los cambios a otros archivos"


--'git reset HEAD' --- Revierte los cambios subidos al staging, los saca de staging pero no los borra del	
				     directorio, quedan disponibles para seguir modificando.


--'git stash' --- Almacena los cambios actuales que no se les ha hecho un commit en una memoria temporal
				  esto permite poder cambiar de rama y luego recuperar los cambios realizados.


--'git stash pop' --- Restaura los cambios almacenados con anterioridad con el comando 'git stash'


--'git stash list' --- Enlista los WIP almacenados (Work in progress [WIP])


--'git stash branch name_branch' --- Almacena el stash enlistado en (git stash list) en una nueva rama.
									   Tener en cuenta que se debe primero almacenar los cambios con git stash.


--'git clean -f' --- Elimina los archivos que git considera que son basura.


--'git clean --dry-run' ---Hace una simulacion de lo que git borraria si se ejecuta git clean.


--'git cherry-pick code_commit' --- Trae los cambios del commit de una rama a la actual.


--'git reflog' --- Historia detallada del proyecto, mas detallada que git log, se recomienda revision de este link.
	https://platzi.com/clases/1557-git-github/19988-git-reset-y-reflog-usese-en-caso-de-emergencia/


--'git grep -n palabra' --- Busca la palabra "palabra en los archivos locales e indica su linea en codigo.


--'git grep -c palabra' --- Cuenta las repeticiones de "palabra"


--'git log -S "palabra" --- Busca donde se relaciona "palabra" en los commits


--'git blame -c nombre_archivo' --- Enlista el archivo y los cambios y quien los ha hecho.


--'shortlog -sn --all --no-merges' --- Enlista los commits que han hecho los participantes del proyecto
									   sin incluir merges.




!!---------------------------------------------------- BRANCH ----------------------------------------------------!!

git branch -D name_branch --- Delete branch from Git

git merge branch_1 branch2 --- Codigo para unir la branch2 a la branch1.

git branch -r --- Enlista las ramas remotas del servidor.

git branch -a --- Enlista todas las ramas, en blanco locales y en rojos del servidor.


!!---------------------------------------------------- SERVIDOR GITHUB ----------------------------------------------------!!

Crear llave publica y privada ssh:
	A continuacion el comando que crea la llave publica y privada necesarias para la interacion con Github:
		ssh-keygen -t rsa -b 4096 -C "mirodriguezor@unal.edu.co"

Agregar el origen remoto de github:
	git remote add origin git@github.com:mirodriguezor/hyperblog.git

Verificar el remote:
	git remote

Verificar el origin:
	git remote -v




!!----------------------------------------------------TAGS----------------------------------------------------!!

-- 'git tag' --- Para enlistar los tags que hay, los tag son las versiones.


-- 'git show-ref --tags' --- Para enlistar los tags con los commits relacionados.


-- 'git tag -a nombre_tag -m "Detalle del tag"' --- Para agregar un nuevo tag


-- 'git push origin --tags' --- Para enviar el tag creado al servidor


-- 'git tag -d nombre_tag' --- Para eliminar un tag de forma local.


-- 'git push origin :refs/tags/nombre_tag' --- Para borrar el tag del servidor ya que con "git tag -d" solo se borra	
											   de forma local.

<<<<<<< Updated upstream
=======


!!------------------------------------COMO HACER UN PULL REQUESTS-------------------------------------!!
1. Nos ubicamos en la rama diferente al master.
2. Realizamos el respectivo pull para traer la informacion actualizada de la rama.
3. Hacemos los cambios deseados, realizamos commit y push a la rama donde estamos.
4. Abrimos la pagina de Github, le damos en pullrequest y comparamos la rama main con la que hicimos el push.




!!!!-----------------------------------PROYECTOS OPENSOURCE----------------------------------------------------!!
Pasos para realizar Fork y enviar pull request a repositorios publicos:
	1. Ingresar al repositorio y darle Fork.
	2. Ingresar en la carpeta deseada en el local y realizar git clone.
	3. Ya con el repositorio en nuestro git y de forma local se realizan cambios,
		se realiza el respectivo add, commit y push al repositorio clonado en nuestro git.
	4.Desde el git se le realiza el pull request, Github identifica que es un repositorio clonado
		y brinda la facilidad para enviar el pull request al dueño del repositorio.

----El link a continuacion tambien sirve para entender un poco sobre los pullrequest desde espectador.

-- Link para entender manejo en proyecto Opensource:
	https://platzi.com/clases/1557-git-github/19978-creando-un-fork-contribuyendo-a-un-repositorio/





!!!!-----------------------------------GITHUB PAGES----------------------------------------------------!!

En este enlace enseña como subir el repositorio a una url publica donde se pueda visualizar.
	https://platzi.com/clases/1557-git-github/19976-tu-sitio-web-publico-con-github-pages/




!!!!-----------------------------------GIT REBASE---------------------------------------------------!!

En este enlace enseña como hacer rebase, no es recomendado pero es buena herramienta bien utilizada.
	https://platzi.com/clases/1557-git-github/19975-git-rebase-reorganizando-el-trabajo-realizado/


>>>>>>> Stashed changes
